.TH "bdsync" "1" "21 Oct 2014" "" ""
.SH "NAME"
bdsync \(em a fast block device synchronizing tool
.SH "SYNOPSIS"

.PP 
.nf 
  Client: bdsync [--verbose] [--digest=DIGEST] REMSHCMD LOCDEV REMDEV
  Server: bdsync --server [--verbose]
  Patch:  bdsync --patch[=DSTDEV] [--verbose]
.fi 
.SH "DESCRIPTION"

.PP 
Bdsync can be used to synchronize block devices over a network. It generates
a "binary patchfile" in an efficient way by comparing checksums of blocks
of the local block device LOCDEV and the remote block device REMDEV.
.PP
This binary patchfile can be sent to the remote machine and applied to its block
device REMDEV, after which the local blockdev LOCDEV and the remote block 
device REMDEV are synchronized.
.PP
bdsync was built to do the only thing rsync isn't able to do: synchronize block
devices.
.PP 
.SH "OPTIONS"

.PP 
.TP
.B \-\-server
Start bdsync as a server. No further arguments are accepted, all controll is done by standard input and standard output

.TP
.B \-\-patch[=DEVICE]
Make bdsync "patch" a device by applying a bdsync file read from standard input. The device will be determined from the bdsync data unless an (optional) device name DEVICE is specified

.TP
.B \-\-warndev
Makes bdsync (in patch mode) warn if the specified device with the \-\-patch option differs from the device in the patch data

.TP
.B \-\-verbose
Increase the verbosity of bdsync. Can be repeated multiple times.

.TP
.B \-\-hash=DIGEST
Choose any of openssl's digests as a hash for matching blocks on LOCDEV en REMDEV. Default is md5.

.TP
.B \-\-blocksize=BLOCKSIZE
Set the blocksize in bytes for which hashes are calculated on both LOCDEV and REMDEV. Default 4096.

.TP
.B \-\-checksum=DIGEST
Choose any of openssl's digests as a checksum for all LOCDEV data. The checksum will be written to the binary patchfile. Default is none.

.TP
.B \-\-twopass
Makes bdsync first match checksums using large blocks (64 * BLOCKSIZE) and then match checksums using small blocks (BLOCKSIZE). This may reduce systemcall overhead and networktraffic
when the "binary patchfile" has limited size.

.TP
.B \-\-remdata
Makes bdsync (in client mode) write the remote data to standard output instead of the local blocks that differs.

.TP
.B \-\-diffsize[=OPTION[,warn]]
Specifies how bdsync (in client mode and patch mode) should handle different sizes of devices. Possible values for OPTION are
.ft B
strict, 
resize
.ft
and
.ft B
minsize.
.ft
When
.ft B
strict
.ft
is specified, different sizes for LOCDEV and REMDEV are not allowed. When
.ft B
resize
.ft
is specified, different sizes are accepted and the LOCDEV size is applied to REMDEV in patch mode which is only supported for (image) files (not devices). When
.ft B
minsize
.ft
is specified, the smallest size of both LOCDEV and REMDEV is considered (excess data is ignored).
 
When the
.ft B
\-\-diffsize
.ft
command line option is not specified at all, it defaults to
.ft B
\-\-diffsize=strict.
.ft
When the
.ft B
\-\-diffsize
.ft
is specified, but without any of the additional options, it defaults to
.ft B
\-\-diffsize=resize
.ft
which is consistent with earlier versions of bdsync.

When the additional
.ft B
warn
.ft
option is specified, a warning is issued when sizes differ.

.TP
.B \-\-zeroblocks
Makes bdsync (in client mode and server mode) identify zero-filled blocks and optimize hashes for these blocks. This may be usefull for sparse files with lots of zero filled blocks. 

.TP
.B \-\-flushcache
This client option makes both bdsync client and server actively inform the OS the data is no longer needed after reading it hence reducing OS buffer cache polution by bcache. This
works especially well when deltas are small, because in that case bcache itself won't be reading blocks twice.

.SH "USAGE"

.PP 
Bdsync assumes a client is connecting to a server. The connection isn't
established by the client itself, but by a remote-shell-command REMSHCMD.
This REMSHCMD can be any kind of command to make a connection: rsh, ssh, netcat..
If using rsh or ssh REMSHCMD should be the full command to make the
connection including the remote bdsync command te be executed in server mode. If
using netcat to make the connection, the remote server mode bdsync command should
be executed by inetd, xinetd etc.
.PP
The --verbose option results in verbose output. In Server mode the output will be sent to syslog. The --verbose option can be repeated raising the verbosity level.
.PP
Bdsync can be initiated like this in its most simple form:
.PP
.RS 
\f(CWbdsync "bdsync -s" /dev/LOCDEV /dev/REMDEV > DEV.bdsync\fP
.RE
.PP
This generates a patchfile DEV.rsync of the /dev/LOCDEV and the /dev/REMDEV devices
which both are local. A more realistic example is this:
.PP
.RS 
\f(CWbdsync "ssh doe@foo.org bdsync --server" /dev/LOCDEV /dev/REMDEV | gzip > DEV.bdsync.gz\fP
.RE
.PP
This bdsync client makes an ssh connection to foo.org as user doe and executes a
bdsync client by passing it the --server option. The generated patchfile output is
passed on to gzip which creates a compressed patchfile DEV.bdsync.gz.
.PP
On the remote machine foo.org the user doe can apply the patch by executing:
.PP
.RS 
\f(CWgzip -d < DEV.bdsync.gz | bdsync --patch=/dev/DSTDEV\fP
.RE
.PP
The reason to use a binary patch file instead of instantly patching the remote
block device REMDEV is twofold:
.PP
.IP o
Sending over a complete patchfile allows to synchronize in a consistent way in case
of an interruption (powerloss, network malfunction) since you can choose to
apply the (complete) patchfile or not.
.PP
.IP o
Compression of the patchfile can easily be done, without introducing complexity in
bdsync itself.
.PP 
.SH EXIT STATUS
.TP
0
completed successfully
.TP
1
invalid or conflicting parameters supplied
.TP
2
invalid patch format
.TP
3
size mismatch of source and destination blockdevice
.TP
4
protocol error
.TP
5
checksum error
.TP
6
read error
.TP
7
failed to collect randomness
.TP
8
process management error
.TP
9
write error
.TP
10
digest error
.TP
11
transmission error
.TP
12
IO error
.TP
13
connection error
